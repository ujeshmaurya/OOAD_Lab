
import com.google.zxing.WriterException;
import java.awt.FileDialog;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.Base64;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Admin
 */
public class chooseOptionsFrame extends javax.swing.JFrame {

    /**
     * Creates new form chooseOptionsFrame
     */
    public chooseOptionsFrame() {
        initComponents();
        sendImageBtn.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sendTextBtn = new javax.swing.JButton();
        sendImageBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sendTextBtn.setText("Send Text");
        sendTextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendTextBtnActionPerformed(evt);
            }
        });

        sendImageBtn.setText("Send Image");
        sendImageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendImageBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(sendTextBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addComponent(sendImageBtn)
                .addGap(86, 86, 86))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendTextBtn)
                    .addComponent(sendImageBtn))
                .addContainerGap(149, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void sendImageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendImageBtnActionPerformed
        try {
            chooseOptionsFrame cof = this;
            FileDialog fdlg = new FileDialog(this, "Choose an image to send ",FileDialog.LOAD);
            fdlg.setVisible(true);
            String name = fdlg.getFile();
            String path = fdlg.getDirectory();
            if(name == null){
                return;
            }
            File file = new File(path, name);
            System.out.println(path + name);
            file.createNewFile();

            //Converting an image to text
            FileInputStream fis = new FileInputStream(file);
            byte[] data = new byte[(int)file.length()];
            fis.read(data);
            fis.close();
            char[] cbuf = new char[data.length];
            boolean [] sign = new boolean[data.length];
            for (int i = 0; i < data.length; i++) {
                int bt = (int)data[i];
                if (bt< 0) {sign[i] = true; bt = -bt;}
                else sign[i] = false;
                //System.out.println(bt);
                cbuf[i] = (char) (bt);
            }

            String text = new String(cbuf);
            System.out.println(text);

            Thread t = new Thread(new Runnable() {
            public void run() {
            try {
                Scanner scanner = new Scanner(new File("./a.txt"));
                int fileNo = scanner.nextInt();
                System.out.println("haha " + fileNo);

                Writer wr = new FileWriter("./a.txt");
                wr.write(new Integer(fileNo + 1).toString());
                wr.close();

                if(text == "") return;
                QRCodeGenerator QRObj = new QRCodeGenerator();
                try {
                    QRObj.generateQRCodeImage(text, 350, 350, fileNo);

                    //IMAGE CONVERSION TO BUFFER
                    FileInputStream fis = new FileInputStream ("qrcodes/MyQRCode" + fileNo + ".png");
                    byte[] buffer = new byte[fis.available()];
                    fis.read(buffer);
                    itemSend tr = new itemSend(buffer, fileNo, sign, true);
                    Sender client = new Sender();
                    client.communicate(tr);

                    JFrame frame = new JFrame("YOUR IMAGE");
                    BufferedImage img = ImageIO.read(new File("./qrcodes/MyQRCode" + fileNo + ".png"));
                    ImageIcon icon = new ImageIcon(img);
                    JLabel labelObj = new JLabel(icon);
                    frame.add(labelObj);
                    frame.pack();
                    frame.setVisible(true);

                }
                catch (IOException e) {
                    System.out.println("Could not generate QR Code, IOException :: " + e.getMessage());
                }
           }
            catch (FileNotFoundException ex) {
                Logger.getLogger(inputText.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(inputText.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(inputText.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    });

    t.start();
        } catch (IOException ex) {
            Logger.getLogger(chooseOptionsFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sendImageBtnActionPerformed

    private void sendTextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendTextBtnActionPerformed
        this.dispose();
        inputText fObj = new inputText();
        fObj.setVisible(true);
    }//GEN-LAST:event_sendTextBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chooseOptionsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chooseOptionsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chooseOptionsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chooseOptionsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new chooseOptionsFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton sendImageBtn;
    private javax.swing.JButton sendTextBtn;
    // End of variables declaration//GEN-END:variables
}
